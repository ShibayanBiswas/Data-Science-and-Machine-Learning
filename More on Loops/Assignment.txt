
(a) What will be the output of following code?
for i in range(1,5,2):
    print(i,end=' ')

Answer: 1 3


(b) What will be the output of following code?
for i in range(5):
    print(i,end= ' ')

Answer: 0 1 2 3 4


(c) Terms of AP- Write a program to print first x terms of the series 3N + 2 which are not multiples of 4.

Answer: n = int(input())
	count = 0
	i = 1
	while count < n:
    		term = 3 * i + 2
    		if term % 4 != 0:
        		print(term, end=" ")
        		count += 1
    		i += 1    


(d) Sum or product- Write a program that asks the user for a number N and a choice C. And then give them the possibility to choose between computing the sum and computing the product of all
integers in the range 1 to N (both inclusive).

Answer: n = int(input())
	ch = int(input())
	if ch == 1:
    		sum = 0
    		for i in range(1, n + 1):
        		sum = sum + i
    		print(sum)
	elif ch == 2:
    		prod = 1
    		for i in range(1, n + 1):
        		prod = prod * i
    		print(prod)
	else:
    		print("-1")


(e) What will be the output of following code?
i=1
while i<5:
    if i==3:
        break
    print(i,end=" ")
    i = i +1

Answer: 1 2 [When “i” becomes equal to 3, the break statement will execute and the code will break out of the while loop without executing any further instructions.]


(f) What will be the output of following code?
i=1
while i<3:
    j=1
    while j<5:
        if j==3:
            break
        print(j,end=" ")
        j = j + 1
    i = i + 1

Answer: 1 2 1 2 [In a nested loop, a break statement only stops the loop it is placed in. Therefore, if a break is placed in the inner loop, the outer loop still continues. However, if the 
break is placed in the outer loop, all of the loopings stop. So, in our example, the break statement only stops the inner loop and the outer loop continues to run.]


(g) Square root (Integral)- Given a number N, find its square root. You need to find and print only the integral part of square root of N.

Answer: n = int(input())
	output = 0
	while (output * output) <= n:
    		output = output + 1
	output = output - 1
	print(output)


(h) What will be the output of following code?
i=1
while i<5:
    if i == 6:
        break
    print(i,end=" ")
    i = i + 1
else:
    print(“Else is also printed”);

Answer: 1 2 3 4 Else is also printed [The else block just after for/while is executed only when the loop is NOT terminated by a break statement. In our example, the break statement will 
never hit because the value of “i” will not go above 5.]


(i) What will be the output of following code?
i=1
while i<5:
    if i == 3:
        break
    print(i,end=” “)
    i = i + 1
else:
    print(“Else is also printed”)

Answer: 1 2


(j) What will be the output of following code?
i=1
while i<5:
    if i==3:
            continue
    print(i,end=" ")
    i = i + 1

Answer: 1 2 Infinite Loop [The continue statement jumps out of the current iteration and forces the next iteration of the loop to take place. In our example when the value of “i” becomes 
equal to 3 the continue statement will execute and the code again goes to while without executing the further statements. So the value of “i” will not increase and the while loop runs 
infinitely.]


(k) What will be the output of following code?
i=1
while i<3:
    j=0
    while j<5:
        j = j +1
        if j==3:
            continue
        print(j,end=” “)
    i = i +1

Answer: 1 2 4 5 1 2 4 5


(l) Decimal to Binary- Given a decimal number (integer N), convert it into binary and print. The binary number should be in the form of an integer.

Answer: n = int(input())
	binary = 0
	power = 1
	while n > 0:
    		lastbit = n % 2
    		binary += (lastbit * power)
    		power *= 10
    		n = n // 2
	print(binary)


(m) Binary to decimal- Given a binary number as an integer N, convert it into decimal and print.

Answer: n = int(input())
	decimal = 0
	power = 1
	while n > 0:
    		last = n % 10
    		decimal += (last * power)
    		power *= 2
    		n = n // 10
	print(decimal)


(n) Even Fibonacci Numbers- Given a number N find the sum of all the even valued terms in the fibonacci sequence less than or equal to N. Try generating only even fibonacci numbers instead 
of iterating over all Fibonacci numbers.

Answer: def sum_even_fib(n):
		sum = 0
		if n <= 1:
			return sum
		fib1, fib2 = 1, 1
		fib1, fib2 = fib2, fib1 + fib2
		while(fib2 <= n):
			if(fib2 % 2 == 0):
				sum += fib2
			fib1, fib2 = fib2, fib1 + fib2
		return sum
	print(sum_even_fib(int(input())))


(o) Trailing zeroes in n!- Find and return number of trailing 0s in n factorial without calculating n factorial.

Answer: def findTrailingZeros(n):
    	# Negative Number Edge Case
    	if(n < 0):
        	return -1
    	# Initialize result
    	count = 0
    	# Keep dividing n by 5 & update Count
    	while(n >= 5):
        	n //= 5
        	count += n
    	return count
	# Driver program
	n = int(input())
	print(findTrailingZeros(n))
 