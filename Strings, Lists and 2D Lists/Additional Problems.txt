
(a) Row wise sum- For a given two-dimensional integer array/list of size (N x M), find and print the sum of each of the row elements in a single line, separated by a single space.
Answer: from sys import stdin
	def rowWiseSum(mat, nRows, mCols):
		rowSum = 0
		for j in range(mCols):
			rowSum += mat[i][j]
		print(rowSum, end = " ")
	def take2DInput():
		li = stdin.readline().rstrip().split(" ")
		nRows = int(li[0])
		mCols = int(li[1])
		if nRows == 0:
			return list(), 0, 0
		mat = [list(map(int(input().strip().split(" "))) for row in range(nRows)]
		return mat, nRows, mCols
	t = int(stdin.readline().rstrip())
	while t > 0:
		mat, nRows, mCols = take2DInput()
		rowwiseSum(mat, nRows, mCols)
		print()
		t -= 1


(b) Wave Print- For a given two-dimensional integer array/list of size (N x M), print the array/list in a sine wave order, i.e, print the first column top to bottom, next column bottom to 
top and so on.
Answer: def waveprint(mat, nRows, mCols):
		if nRows == 0:
			return
		for j in range(mCols):
			if j%2 == 0:
				for i in range(nRows):
					print(mat[i][j], end = " ")
			else:
				for i in range((nRows - 1), -1, -1):
					print(mat[i][j], end = " ")


(c) Remove Consecutive Duplicates- For a given string(str), remove all the consecutive duplicate characters.
Answer: string = input()
	for i in range(len(string) - 1):
    		if string[i] != string[i + 1]:
        		print(string[i], end = "")


(d) Reverse Each Word- Aadil has been provided with a sentence in the form of a string as a function parameter. The task is to implement a function so as to print the sentence such that 
each word in the sentence is reversed.
Answer: string = input()	# Splits the string into list seperated by blank space
	new_string = string.split()
	for i in range(len(new_string)):
    		req_word=new_string[i][::-1]	# Reverse of the word that is the element of the array formed
    		print(req_word, end = " ")


(e) Highest Occuring Character- For a given a string(str), find and return the highest occurring character.
Answer: def get_max_occuring_char(str1):
  		ctr = [0] * 256	# Counter array for all possible characters with respect to their ASCII values
  		max = 0
  		ch = ''
  		for i in str1:
    			ctr[ord(i)] += 1;
  		for i in str1:
    			if max < ctr[ord(i)]:
      				max = ctr[ord(i)]
      				ch = i
  		return ch
	str1=input()
	print(get_max_occuring_char(str1))


(f) Arrange Numbers in the Array- You have been given an empty array(ARR) and its size N. The only input taken from the user will be N and you need not worry about the array.
Your task is to populate the array using the integer values in the range 1 to N.
Answer: from sys import stdin
	def arrange(arr, n):
    		left = 0
    		right = n - 1
    		counter = 1
    		while left <= right:
        		if counter % 2 == 1:
            			arr[left] = counter
            			counter += 1
            			left += 1
        		else:
            			arr[right] = counter
            			counter += 1
            			right -= 1
	def printList(arr, n):
    		for i in range(n):
        		print(arr[i], end = ' ')
    		print()
	t = int(stdin.readline().strip())
	while t > 0:
    		n = int(stdin.readline().strip())
    		arr = n * [0]
    		arrange(arr, n)
    		printList(arr, n)
    		t -= 1


(g) Leaders in array- Given an integer array A of size n. Find and print all the leaders present in the input array. An array element A[i] is called Leader, if all the elements following 
it (i.e. present at its right) are less than or equal to A[i]. Print all the leader elements separated by space and in the same order they are present in the input array.
Answer: n = int(input())
	arr = [int(ele) for ele in input().split()]
	curr_max = arr[n - 1]
	ans = [arr[n - 1]]
	for i in range(n - 2,- 1, -1):
    		if arr[i] >= curr_max:
        		ans.append(arr[i])
        		curr_max = arr[i]
	for i in range(len(ans) - 1, -1, -1):
    		print(ans[i], end = ' ')


(h) Maximise the sum- Given 2 sorted arrays (in increasing order), find a path through the intersections that produces maximum sum and return the maximum sum. That is, we can switch from 
one array to another array only at common elements. If no intersection element is present, we need to take sum of all elements from the array with greater sum.
Sample Input :
6
1 5 10 15 20 25
5
2 4 5 9 15
Sample Output :
81
Explanation :
We start from array 2 and take sum till 5 (sum = 11). Then we'll switch to array at element 10 and take till 15. So sum = 36. Now, no elements left in array after 15, so we'll continue in 
array 1. Hence sum is 81
Answer: def maxPathSum(ar1, ar2):
    		m = len(ar1)
    		n = len(ar2)
    		max = 0
    		suma = 0
    		sumb = 0
    		i = 0
    		j = 0
    		while(i < m and j < n):
        		if(ar1[i] == ar2[j]):
            			max += suma if suma > sumb else sumb	
            			max += ar1[i]
            			i += 1
            			j += 1
            			suma = sumb = 0
        		elif(ar1[i] < ar2[j]):	
            			suma += ar1[i]
            			i += 1
        		else:					
            			sumb += ar2[j]
            			j += 1
    		while(i < m):
        		suma += ar1[i]
        		i += 1
    		while(j < n):
        		sumb += ar2[j]
        		j += 1
    		max += suma if suma > sumb else sumb
    		return max
	n1 = int(input())   # size of the first list
	ar1 = list(int(i) for i in input().strip().split(' '))
	n2 = int(input())   # size of the second list
	ar2 = list(int(i) for i in input().strip().split(' '))
	sum = maxPathSum(ar1, ar2)
	print(sum)


(i) Largest Row or Column- For a given two-dimensional integer array/list of size (N x M), you need to find out which row or column has the largest sum(sum of all the elements in a 
row/column) amongst all the rows and columns.
Answer: def findLargest(arr, nRows, mCols):
		isRow = True
		largestSum = INT_MIN
		num = 0
		for i in range(nRows):
			rowSum = 0
			for j in range(mCols):
				rowSum += arr[i][j]
			if rowSum > largestSum:
				largestSum = rowSum
				num = i
		for j in range(mCols):
			colSum = 0
			for i in range(nRows):
				colSum += arr[i][j]
			if colSum > largestSum:
				largestSum = colSum
				num = j
				isRow = False
		if isRow:
			print("row" + str(num) + " " + str(largestSum))
		else: 
			print("column" + str(num) + " " + str(largestSum)) 


(j) Print Spiral- For a given two-dimensional integer array/list of size (N x M), print it in a spiral form. That is, you need to print in the order followed for every iteration.
Answer: def spiralPrint(mat, nRows, mCols):
		if nRows == 0:
			return
		rowStart, colStart = 0, 0
		numElements = nRows * mCols
		count = 0
		while count < numElements:
			i = colStart
			while i < mCols and count < numElements:
				print(mat[i][mCols - 1], end = " ")
				count += 1
				i += 1
			nRows -= 1
			i = nRows - 1
			while i >= rowStart and count < numElements:
				print(mat[i][colStart], end = " ")
				count += 1
				i -= 1
			colStart += 1


(k) Longest Substring Without Repeating Characters- Given a string 'S' of length 'L' , return the length of the longest substring without repeating the characters.
Answer: def isAllUnique(s, start, end):
    # Declaring a set of char for checking, if the given input substring has all unique characters or not
    st = set()
    # Iterating for each character index in the string
    for i in range(start, end+1):
        c = s[i]
        if c in st:
            return False
        st.add(c)
    return True
def lengthOfLongestSubstring(s):
    # Declaring maxlen which will store the length of the longest substring without repeating characters
    maxLen = 0
    length = len(s)
    # Running a nested loop to check for each substring of the string
    for i in range(length):
        for j in range(i, length):
            if (isAllUnique(s, i, j)):
                # Updating maxLen and it gets updated if current substring length is greater than maxLen
                maxLen = max(maxLen, j - i + 1)
    # Return maxlen which is storing the length of the longest substring without repeating characters           
    return maxLen