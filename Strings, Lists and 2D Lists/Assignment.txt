
(a) Strings in Python are -

Answer: Immutable [Python strings are immutable, which means they cannot be altered after they are created]


(b) What is the output when following code is executed ?
    s = "abcd"
    s.upper()
    print(s)                    
Answer: abcd [ s.upper() returns a new object and doesn’t make changes in original string object]


(c) What is output of following code ?
    s = "abcd"
    print(s + 12)
Answer: Error [You can’t add an integer value to a string. The right way to add will be s + str(12) i.e. convert 12 to string first and then add]


(d) What is the output when following statement is executed ?
    "abcd"[2:]
Answer: cd [Slice operation is performed on string. So result will be  all chars starting from index 2 to last index]


(e) What is the output when following code is executed ?
str1 = 'hello'
print(str1[-1:])
Answer: o [-1 corresponds to the last index]


(f) What is the output when following code is executed ?
s = "abcdefghi"
s[-3:-1]
Answer: gh [Format: str[start_index: last_index]. Here, -3 means it will start from third last element and slice till the last index (-1) but not including it. So it will output “gh”]

(g) Check Palindrome- Given a string, determine if it is a palindrome, considering only alphanumeric characters.
Answer: from sys import stdin
	def isPalindrome(string):
		left = 0
		right = len(string) - 1
		while left < right:
			if string[left] != string[right]:
				return False
			left += 1
			right -= 1
		return True
	string = stdin.readline.strip()
	ans = isPalindrome(string)
	if ans:
		print('true')
	else:
		print('false')


(h) Print all substrings- For a given input string(str), write a function to print all the possible substrings.
Answer: from sys import stdin
	def printSubstrings(string) :
    		n = len(string)
    		for i in range(n):
        		for j in  range(i, n):
            			for k in range(i, j+1):
                			print(string[k], end = "")
            			print()

	string = stdin.readline().strip();
	printSubstrings(string)


(i) Which of the following commands will create a list?
Answer: list1 = list(), list1 = [], list1 = list([1, 2, 3])


(j) What is the output when we execute list(“hello”)?
Answer: [‘h’, ‘e’, ‘l’, ‘l’, ‘o’]


(k) Suppose listExample is [‘h’,’e’,’l’,’l’,’o’], what is len(listExample) ?
Answer: 5


(l) Suppose list1 is [2445,133,12454,123], what is max(list1) ?\
Answer: 12454


(m) What is the output of the following?
print([i.lower() for i in "HELLO"])
Answer: [‘h’, ‘e’, ‘l’, ‘l’, ‘o’] 


(n) What will be the output ?
aList = [123, 'xyz', 'zara', 'abc'];
print(aList.pop())
Answer: abc [pop(): It deletes and returns the element at the specified index. If we don't mention the index, it by default pops the last element in the list]


(o) Swap Alternate- You have been given an array/list(ARR) of size N. You need to swap every pair of alternate elements in the array/list. You don't need to print or return anything, just 
change in the input array itself.
Answer: from sys import stdin
	def swapAlternate(arr, n) :
    		for i in range(0, (n-1), 2):
        		temp = arr[i]
        		arr[i] = arr[i+1]
        		arr[i+1] = temp
	def takeInput() :
    		n = int(stdin.readline().rstrip())
    		if n == 0 :
        		return list(), 0
    		arr = list(map(int, stdin.readline().rstrip().split(" ")))
    		return arr, n
	def printList(arr, n) :
    		for i in range(n) :
        		print(arr[i], end = " ")
    		print()
	t = int(stdin.readline().rstrip())
	while t > 0 :
    		arr, n = takeInput()
    		if n != 0 :
        		swapAlternate(arr, n)
        		printList(arr, n)
    		t -= 1


(p) Array equilibrium index- For a given array/list(ARR) of size 'N,' find and return the 'Equilibrium Index' of the array/list. Equilibrium Index of an array/list is an index 'i' such that
the sum of elements at indices [0 to (i - 1)] is equal to the sum of elements at indices [(i + 1) to (N-1)]. One thing to note here is, the item at the index 'i' is not included in either 
part. If more than one equilibrium indices are present, then the index appearing first in left to right fashion should be returned. Negative one(-1) if no such index is present.
Answer: def arrayEquilibriumIndex(arr, n):
		leftSum, rightSum = 0, 0
		for i in range(n):
			# Here we find the sum of the complete array
			rightSum += arr[i]	
		for i in range(n):
			# Here we keep start substracting the starting terms of the array to get the required index
			rightSum -= arr[i]
			if (leftSum == rightSum):
				return i
			# Here we update the leftSum
			leftSum += arr[i]
		return -1


(q) Which statement correct:
Answer: Negative numbers mean that you count from the right instead of the left, list[-1] refers to the last element, list[-2] is the second-last 


(r) What will be the output for below code ?
 a = [1, 2, 3, 4, 5, 6, 7, 8]
 a[1:4]
Answer: [2, 3, 4] (This means taking elements from the list starting from index 1 up to index 4 but not including index 4. So, it will take the elements present at indexes 1, 2 and 3)


(s) Which of the following statements will result in the output : 6 ?
A = [[1,2,3],
     [4,5,6],
     [7,8,9]]
Answer: A[1][2]


(t) What is the output ?
	A = [[1, 2, 3],
    	     [4, 5, 6],
             [7, 8, 9]]
	print([A[i][i] for i in range(len(A))])
Answer: [1, 5, 9]


(u) What is the output of the code shown below ?
r = [11, 12, 13, 14]
A = [[0, 10, 20],
     [30, 40, 50],
     [60, 70, 80]]
for row in A:
    for col in row:
        r.append(col+10)
print(r)
Answer: [11, 12, 13, 14,10, 20, 30, 40, 50, 60, 70, 80, 90] (The nested for loop is going to run through each element of 2D List 'A', add 10 to it and then append to the list r)


(v) What is the output of following code ?
A = [[0, 10, 20],
       [30, 40, 50],
       [60, 70, 80]]

print(A[0:2][0])
Answer: [0,10,20] (A[0:2] select the first two row of the 2d list and A[0:2][0] select the first row of the A[0:2] list)


(w) What is the output ?
a = [10,23,56,[78]]
b = list(a)
a[3][0] = 95
a[1] = 34
print(b)
Answer: [10,23,56,[95]] (They only create a copy on the 0th level. That's called shallow copy. The elements of a nested element are copied by reference)


(x) What is the output ?
points = [[1, 2], [3, 1.5], [0.5,7]]
points.sort()
print(points)
Answer: [[0.5, 7], [1, 2], [3, 1.5]] (Sort function by default sort the list by first column)