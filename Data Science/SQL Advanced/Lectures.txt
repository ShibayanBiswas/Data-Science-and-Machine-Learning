source Desktop/MySQL_Sample_Database.sql;
/* refer to dataset source : http://www.mysqltutorial.org/mysql-sample-database.aspx */
show databases;
use classicmodels;
show tables;
desc customers;
select customerNumber, contactFirstName, city, state, country, creditLimit from customers;
select customerName, country from customers;
select customerName, country from customers group by country;
/* group by returns one row for each group by first in first out basis */
select count(*) from customers;
select count(*) from customers where country = "USA";
select count(*) from customers group by country;
select country, count(*) from customers group by country;
select state, count(*) from customers group by state;
select state, country, count(*) from customers group by country;
/* we will get one row that is the total number of customers for each country but the values in the state column is decided  by first in first out basis */
select state from customers where country = "Australia";




select customerNumber, city, state, country, creditLimit from customers;
select count(*) from customers where state is not Null; /* 49 */
select count(*) from customers; /* 122 */
select count(*) from customers where state is not Null group by country; /* result is country wise */
select country, count(*) from customers where state is not Null group by country;
desc customers;
select country, sum(creditLimit) from customers;
select country, sum(creditLimit) from customers group by country;
select country, sum(creditLimit) from customers where creditLimit > 50000;
select country, sum(creditLimit) from customers where creditLimit > 50000 group by country;
select country, state, count(*) from customers group by country, state; /* grouping based on multiple columns */
select distinct state from customers where country = "USA";




/* we cannot use where with group by, instead we use having */
select state, count(*) from customers group by state;
select state, count(*) from customers where state is not Null;
select state, count(*) from customers where state is not Null group by state;
select state, count(*) from customers group by state having count(*) > 5;
desc customers;
select country, sum(creditLimit) from customers group by country;
select country, sum(creditLimit) from customers group by country having sum(creditLimit) > 50000;
select country, sum(creditLimit) from customers group by country having sum(creditLimit) > 50000 order by sum(creditLimit);
select country, sum(creditLimit) from customers group by country having sum(creditLimit) > 50000 order by sum(creditLimit) desc;




desc products;
select productName, productLine, quantityInStock, buyPrice, MSRP from products limit 20;
select productName, productLine, quantityInStock, buyPrice, MSRP from products where productLine = "Motorcycles" or productLine = "Classic Cars" or productLine = "Vintage Cars";
select productName, productLine, quantityInStock, buyPrice, MSRP from products where productLine in ("Motorcycles", "Classic Cars", "Vintage Cars");
select productName, productLine, quantityInStock, buyPrice, MSRP from products where productLine in ("Motorcycles", "Classic Cars", "Vintge Cars") and quantityStock > 800 limit 5;
select productName, productLine, quantityInStock, buyPrice, MSRP from products where productLine in ("Motorcycles", "Classic Cars", "Vintge Cars") and quantityStock > 800 order by quantityInStock;
select productName, productLine, quantityInStock, buyPrice, MSRP from products where productLine not in ("Motorcycles", "Classic Cars", "Vintge Cars") and quantityStock > 800 order by quantityInStock;




select productName, productLine, quantityInStock, buyPrice, MSRP from products;
select productName, productLine, quantityInStock, buyPrice, MSRP from products where quantityInStock >= 4000 and quantityInStock <= 7000;
select productName, productLine, quantityInStock, buyPrice, MSRP from products where quantityInStock between 4000 and 7000;
select productName, productLine, quantityInStock, buyPrice, MSRP from products where productName between "A" and "D";
select productName, productLine, quantityInStock, buyPrice, MSRP from products where productName between "Abc" and "Cef";
select productName, productLine, quantityInStock, buyPrice, MSRP from products where quantityInStock not between 4000 and 7000;




select customerNumber, customerName from customers;
select customerNumber, customerName from customers where customerName like "C%"; /* starting with C */
select customerNumber, customerName from customers where customerName like "C%co."; /* starting with C and ending with co. */
select customerNumber, customerName from customers where customerName like "C%m%co."; /* same as before having letter "m" or "M" somewhere in between */
select customerNumber, customerName from customers where customerName like "_a%"; /* second letter is "a" or "A" */




select * from std;
select * from std where name like "%\%%"; /* printing a string with special characters */




select * from table_1; /* contains id (integer values) and name (capital letters) */
select * from table_2; /* contains id(capital letters) and name (string) */
select * from table_1 inner join table_2 on table_1.name = table_2.id;
/* in output the common set (on the basis of given condition) of both id and name from both tables gets printed */
select * from table_1 inner join table_2 on table_1.name = table_2.id where table_1.id >= 2;
select * from ClassDetails;
select * from TeacherDetails;
select * from SubjectDetails;
select Class_ID, Name from ClassDetails join TeacherDetails on ClassTeacher_ID = Teacher_ID; /*  join the un-common columns based on the condition given */




select Class_ID, TeacherDetails.Name, SubjectDetails.Name from ClassDetails join TeacherDetails on ClassTeacher_ID = Teacher_ID join SubjectDetails on Subject_ID = ID; /* output contains the rows to be printed based on the given condition(s) */
select * from table_1; /* contains id (integer values) and name (capital letters) */
select * from table_2; /* contains id(capital letters) and name (string) */
select * from table_1 left join table_2 on table_1.name = table_2.id; /* it picks rows from table_1 and matches them with each row in table_2 based on the condition given */
select * from table_1 right join table_2 on table_1.name = table_2.id; /* opposite of left join */
